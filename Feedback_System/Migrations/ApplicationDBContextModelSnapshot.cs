// <auto-generated />
using System;
using Feedback_System.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Feedback_System.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Feedback_System.Model.Course", b =>
                {
                    b.Property<int>("course_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("course_id"));

                    b.Property<string>("course_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("course_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime2");

                    b.HasKey("course_id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Feedback_System.Model.CourseGroup", b =>
                {
                    b.Property<int>("course_group_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("course_group_id"));

                    b.Property<int?>("course_id")
                        .HasColumnType("int");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<int?>("module_id")
                        .HasColumnType("int");

                    b.HasKey("course_group_id");

                    b.HasIndex("course_id");

                    b.HasIndex("group_id");

                    b.HasIndex("module_id");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("Feedback_System.Model.CourseStudent", b =>
                {
                    b.Property<int>("course_student_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("course_student_id"));

                    b.Property<int?>("course_id")
                        .HasColumnType("int");

                    b.Property<int?>("student_rollno")
                        .HasColumnType("int");

                    b.HasKey("course_student_id");

                    b.HasIndex("course_id");

                    b.HasIndex("student_rollno");

                    b.ToTable("CourseStudents");
                });

            modelBuilder.Entity("Feedback_System.Model.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("feedback_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"));

                    b.Property<int?>("course_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("feedback_type_id")
                        .HasColumnType("int");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<int?>("module_id")
                        .HasColumnType("int");

                    b.Property<int>("session")
                        .HasColumnType("int");

                    b.Property<int?>("staff_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("start_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackId");

                    b.HasIndex("course_id");

                    b.HasIndex("feedback_type_id");

                    b.HasIndex("group_id");

                    b.HasIndex("module_id");

                    b.HasIndex("staff_id");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackAnswer", b =>
                {
                    b.Property<int>("answer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("answer_id"));

                    b.Property<string>("answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("feedback_submit_id")
                        .HasColumnType("int");

                    b.Property<int?>("question_id")
                        .HasColumnType("int");

                    b.HasKey("answer_id");

                    b.HasIndex("feedback_submit_id");

                    b.HasIndex("question_id");

                    b.ToTable("FeedbackAnswers");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackQuestion", b =>
                {
                    b.Property<int>("question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("question_id"));

                    b.Property<int?>("feedback_type_id")
                        .HasColumnType("int");

                    b.Property<string>("question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("question_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("question_id");

                    b.HasIndex("feedback_type_id");

                    b.ToTable("FeedbackQuestions");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackSubmit", b =>
                {
                    b.Property<int>("feedback_submit_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedback_submit_id"));

                    b.Property<int?>("feedback_id")
                        .HasColumnType("int");

                    b.Property<int?>("student_rollno")
                        .HasColumnType("int");

                    b.Property<DateTime>("submited_at")
                        .HasColumnType("datetime2");

                    b.HasKey("feedback_submit_id");

                    b.HasIndex("feedback_id");

                    b.HasIndex("student_rollno");

                    b.ToTable("FeedbackSubmits");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackType", b =>
                {
                    b.Property<int>("feedback_type_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("feedback_type_id"));

                    b.Property<bool>("behaviour")
                        .HasColumnType("bit");

                    b.Property<string>("feedback_type_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("feedback_type_title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("group")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("is_module")
                        .HasColumnType("bit");

                    b.Property<bool>("is_session")
                        .HasColumnType("bit");

                    b.Property<bool>("is_staff")
                        .HasColumnType("bit");

                    b.HasKey("feedback_type_id");

                    b.ToTable("FeedbackType");
                });

            modelBuilder.Entity("Feedback_System.Model.Groups", b =>
                {
                    b.Property<int>("group_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("group_id"));

                    b.Property<int>("group_count")
                        .HasColumnType("int");

                    b.Property<string>("group_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("group_id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Feedback_System.Model.Modules", b =>
                {
                    b.Property<int>("module_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("module_id"));

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<string>("module_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("module_id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Feedback_System.Model.RoleAccess", b =>
                {
                    b.Property<int>("role_access_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("role_access_id"));

                    b.Property<string>("component")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("route")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("staffrole_id")
                        .HasColumnType("int");

                    b.Property<int?>("student_rollno")
                        .HasColumnType("int");

                    b.HasKey("role_access_id");

                    b.HasIndex("staffrole_id");

                    b.HasIndex("student_rollno");

                    b.ToTable("RoleAccesses");
                });

            modelBuilder.Entity("Feedback_System.Model.Staff", b =>
                {
                    b.Property<int>("staff_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("staff_id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("login_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("staffrole_id")
                        .HasColumnType("int");

                    b.HasKey("staff_id");

                    b.HasIndex("staffrole_id");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("Feedback_System.Model.Staffroles", b =>
                {
                    b.Property<int>("staffrole_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("staffrole_id"));

                    b.Property<string>("staffrole_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("staffrole_id");

                    b.ToTable("Staffroles");
                });

            modelBuilder.Entity("Feedback_System.Model.Student", b =>
                {
                    b.Property<int>("student_rollno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("student_rollno"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<string>("last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("login_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profile_image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("student_rollno");

                    b.HasIndex("group_id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Feedback_System.Model.CourseGroup", b =>
                {
                    b.HasOne("Feedback_System.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("course_id");

                    b.HasOne("Feedback_System.Model.Groups", "Groups")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.HasOne("Feedback_System.Model.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("module_id");

                    b.Navigation("Course");

                    b.Navigation("Groups");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Feedback_System.Model.CourseStudent", b =>
                {
                    b.HasOne("Feedback_System.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("course_id");

                    b.HasOne("Feedback_System.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("student_rollno");

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Feedback_System.Model.Feedback", b =>
                {
                    b.HasOne("Feedback_System.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("course_id");

                    b.HasOne("Feedback_System.Model.FeedbackType", "FeedbackType")
                        .WithMany()
                        .HasForeignKey("feedback_type_id");

                    b.HasOne("Feedback_System.Model.Groups", "Groups")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.HasOne("Feedback_System.Model.Modules", "Module")
                        .WithMany()
                        .HasForeignKey("module_id");

                    b.HasOne("Feedback_System.Model.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("staff_id");

                    b.Navigation("Course");

                    b.Navigation("FeedbackType");

                    b.Navigation("Groups");

                    b.Navigation("Module");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackAnswer", b =>
                {
                    b.HasOne("Feedback_System.Model.FeedbackSubmit", "FeedbackSubmit")
                        .WithMany()
                        .HasForeignKey("feedback_submit_id");

                    b.HasOne("Feedback_System.Model.FeedbackQuestion", "FeedbackQuestion")
                        .WithMany()
                        .HasForeignKey("question_id");

                    b.Navigation("FeedbackQuestion");

                    b.Navigation("FeedbackSubmit");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackQuestion", b =>
                {
                    b.HasOne("Feedback_System.Model.FeedbackType", "FeedbackType")
                        .WithMany("FeedbackQuestions")
                        .HasForeignKey("feedback_type_id");

                    b.Navigation("FeedbackType");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackSubmit", b =>
                {
                    b.HasOne("Feedback_System.Model.Feedback", "Feedback")
                        .WithMany()
                        .HasForeignKey("feedback_id");

                    b.HasOne("Feedback_System.Model.Student", "Students")
                        .WithMany()
                        .HasForeignKey("student_rollno");

                    b.Navigation("Feedback");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Feedback_System.Model.RoleAccess", b =>
                {
                    b.HasOne("Feedback_System.Model.Staffroles", "Staffroles")
                        .WithMany()
                        .HasForeignKey("staffrole_id");

                    b.HasOne("Feedback_System.Model.Student", "Students")
                        .WithMany()
                        .HasForeignKey("student_rollno");

                    b.Navigation("Staffroles");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Feedback_System.Model.Staff", b =>
                {
                    b.HasOne("Feedback_System.Model.Staffroles", "Staffroles")
                        .WithMany()
                        .HasForeignKey("staffrole_id");

                    b.Navigation("Staffroles");
                });

            modelBuilder.Entity("Feedback_System.Model.Student", b =>
                {
                    b.HasOne("Feedback_System.Model.Groups", "Groups")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("Feedback_System.Model.FeedbackType", b =>
                {
                    b.Navigation("FeedbackQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
